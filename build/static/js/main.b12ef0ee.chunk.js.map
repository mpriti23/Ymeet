{"version":3,"sources":["Components/login.js","App.js","serviceWorker.js","index.js"],"names":["Panel","Collapse","Column","Table","AppLogin","props","fetchData","fetch","method","headers","then","response","json","responseJson","results","map","Items","id","name","price","setState","loading","data","console","log","state","catch","error","deleteItem","message","info","body","JSON","stringify","res","success","saveItem","this","defaultActiveKey","header","key","gutter","xs","sm","md","lg","className","span","style","width","margin","value","onChange","e","target","type","onClick","align","dataSource","pagination","total","pageSize","hideOnSinglePage","title","dataIndex","Component","App","exact","path","component","withRouter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b12ef0ee.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n//import logo from './logo.svg';\r\nimport './AppLogin.css';\r\nimport 'antd/dist/antd.css';\r\nimport {message,Input,Row, Col, Collapse,Table} from 'antd';\r\nconst {Panel} = Collapse;\r\nconst {Column} = Table;\r\n\r\nclass AppLogin extends Component {\r\n\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data:[],\r\n            id: null,\r\n            name: null,\r\n            price: null,\r\n            \r\n        }\r\n    }\r\n    fetchData = () => {\r\n        fetch(\"https://5igwlepi8i.execute-api.us-east-1.amazonaws.com/items/get-items\", {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(responseJson => {\r\n                const results = responseJson.map(Items => ({\r\n\r\n                    id: Items.id,\r\n                    name: Items.name,\r\n                    price: Items.price\r\n                   \r\n                }))\r\n                // console.log(Items);\r\n                this.setState({loading: false})\r\n                this.setState({data: results});\r\n                console.log(this.state.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        message.info(\"Please wait while the Data is Loading !\");\r\n        this.fetchData();\r\n    }\r\n\r\n\r\n\r\n    deleteItem = () => {\r\n        console.log(this.state)\r\n        message.info(\"Deleting item!  Please Wait\")\r\n            fetch(\"https://5igwlepi8i.execute-api.us-east-1.amazonaws.com/items/delete-item-trial-priti\", {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"id\": this.state.id\r\n                }),\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res)\r\n                    message.success(\"Item Deleted !\")\r\n                    this.fetchData()\r\n                })\r\n                .catch(error => message.error(\"Deletion failed !\"))\r\n                \r\n        \r\n    }\r\n    saveItem = () => {\r\n        console.log(this.state)\r\n        message.info(\"Adding item!  Please Wait\")\r\n            fetch(\"https://5igwlepi8i.execute-api.us-east-1.amazonaws.com/items\", {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"id\": this.state.id,\r\n                    \"name\": this.state.name,\r\n                    \"price\": this.state.price\r\n                    \r\n                }),\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res)\r\n                    message.success(\"Item Added !\")\r\n                    this.fetchData()\r\n                })\r\n                .catch(error => message.error(\"Addition failed !\"))\r\n\r\n        \r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n        <Collapse defaultActiveKey={['3']} >\r\n        <Panel header=\"ADD ITEM\" key=\"1\">\r\n\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n            <Col className=\"gutter-row\" span={8}>ID\r\n            <Input style={{width: \"50%\", margin: 10}} \r\n                    value={this.state.id} onChange={(e) => {this.setState({id: e.target.value})}}/></Col>\r\n              \r\n            <Col className=\"gutter-row\" span={8}> Name<Input style={{width: \"50%\", margin: 10}} \r\n                    value={this.state.name} onChange={(e) => {this.setState({name: e.target.value})}}/>\r\n            </Col> \r\n\r\n            <Col className=\"gutter-row\" span={8}>Price<Input style={{width: \"50%\", margin: 10}} \r\n                            value={this.state.price} onChange={(e) => {this.setState({price: e.target.value})}}/>\r\n            </Col>\r\n        </Row>                                 \r\n            \r\n        <button type=\"submit\" onClick={this.saveItem}>Add</button>\r\n        \r\n            \r\n\r\n\r\n        </Panel>\r\n        <Panel header=\"DELETE ITEM\" key=\"2\">\r\n\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n        <Col className=\"gutter-row\" span={8}>ID <Input style={{width: \"50%\", margin: 10}} align='right'\r\n                    value={this.state.id} onChange={(e) => {this.setState({id: e.target.value})}}/>\r\n                  </Col>  </Row>\r\n                            \r\n              \r\n\r\n            <button align='middle' type=\"submit\" onClick={this.deleteItem}>Delete</button>\r\n\r\n\r\n\r\n        </Panel>\r\n\r\n        <Panel header=\"VIEW ITEM\" key=\"3\">\r\n        <Table  dataSource={this.state.data}\r\n                pagination={{\r\n                        total: 10,\r\n                        pageSize: 100,\r\n                        hideOnSinglePage: true}}\r\n                loading={this.state.loading}>\r\n\r\n                        <Column title=\"ID\" dataIndex=\"id\" key=\"id\"/>\r\n                        <Column title=\"Name\" dataIndex=\"name\" key=\"name\"/>\r\n                        <Column title=\"Price\" dataIndex=\"price\" key=\"price\"/>\r\n                        \r\n                    </Table> \r\n         \r\n\r\n            </Panel>\r\n        </Collapse>\r\n\r\n                        \r\n\r\n                   \r\n        );\r\n    }\r\n}\r\n\r\nexport default AppLogin;\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\n\r\nimport AppLogin from './Components/login';\r\nimport {withRouter} from \"react-router\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <Route exact path={['/', '/item']} component={withRouter(AppLogin)}/>\r\n            \r\n        </Router>\r\n\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App/>\r\n  </BrowserRouter>,\r\n \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}